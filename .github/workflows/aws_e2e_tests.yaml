name: AWS E2E Tests

on:
  #  push:
  #    branches:
  #      - master
  #  pull_request:
  workflow_dispatch:

jobs:
  # Runs tests on AWS that are too big for github actions
  # Tests that are small enough are above in `actions:`
  aws:
    name: AWS
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        juju: [2.9/stable]
        microk8s: [1.24/stable]
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo snap install juju --classic
        sudo snap install juju-wait --classic

    - name: Bootstrap onto AWS
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        set -eux
        juju autoload-credentials --client aws
        juju bootstrap aws/us-east-1 uk8saws --debug --show-log --config test-mode=true --model-default test-mode=true
        juju deploy ubuntu --constraints 'instance-type=t3a.xlarge root-disk=80G'
        juju wait -vw
        juju status
        juju status --format yaml

    - name: Copy code to AWS instance
      run: |
        set -eux
        juju scp -- -r $(pwd)/ ubuntu/0:~/

    - name: Install test dependencies
      run: |
        juju ssh ubuntu/0 <<EOF
          set -eux
          sudo apt update
          sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
          apt-cache policy docker-ce
          sudo apt install -y docker-ce
          sudo systemctl status docker
          sudo usermod -a -G docker ubuntu
        EOF

    - name: Test docker installation
      run: |
        juju ssh ubuntu/0 <<EOF
          set -eux
          docker
          docker run hello-world
        EOF

    - name: Install Kubectl
      run: |
        juju ssh ubuntu/0 <<EOF
          set -eux
          sudo curl -L "https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
          sudo chmod +x /usr/local/bin/kubectl
          kubectl version --short --client
        EOF

    - name: Install kustomize
      run: |
        juju ssh ubuntu/0 <<EOF
          set -eux
          wget https://github.com/kubernetes-sigs/kustomize/releases/download/v3.2.0/kustomize_3.2.0_linux_amd64
          mv kustomize_3.2.0_linux_amd64 manifests/kustomize
          chmod +x manifests/kustomize
        EOF

    - name: Install KinD
      run: |
        juju ssh ubuntu/0 <<EOF
          set -eux
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
        EOF

    - name: Create a KinD Cluster
      run: |
        juju ssh ubuntu/0 <<EOF
          set -eux
          cd manifests
          kind create cluster --config ./tests/gh-actions/kind-cluster.yaml
        EOF

    - name: Deploy Kubeflow
      run: |
        juju ssh ubuntu/0 <<EOF
          set -eux
          cd manifests
          while ! ./kustomize build example | kubectl apply -f -; do echo "Retrying to apply resources"; sleep 10; done
          kubectl -n kubeflow wait --for=condition=Ready pods --all --timeout=1200s
        EOF
      timeout-minutes: 45

    - name: Test Kubeflow
      run: |
        juju ssh ubuntu/0 <<EOF
          set -eux
          cd manifests
          kubectl -n kubeflow-user-example-com create configmap e2e-test --from-file ./tests/e2e/notebook/kubeflow-e2e-mnist.ipynb
          kubectl -n kubeflow-user-example-com create -f ./tests/e2e/yamls/execute-e2e.yaml
          kubectl -n kubeflow-user-example-com wait --for=condition=complete --timeout=1200s job/test-notebook-job
        EOF
      timeout-minutes: 20

    - name: Destroy controller
      run: juju destroy-controller -y uk8saws --destroy-all-models --destroy-storage
      if: always()
